-----------------------------------------------------------------------------------------
-- Generated by WISHBONE Builder. Do not edit this file.
--
-- For defines see wb_devices.defines
--
-- Package: WBDevInterconPkg (WBDevIntercon_package.vhdl)
--
-- Generated Tue May 30 10:23:57 2017
--
-- Wishbone masters:
--   cpu
--
-- Wishbone slaves:
--   rs2
--     baseadr 0x00000000 - size 0x40
--   ad
--     baseadr 0x00000040 - size 0x40
--   tmr
--     baseadr 0x00000080 - size 0x40
--   t16
--     baseadr 0x000000C0 - size 0x40
-----------------------------------------------------------------------------------------
library IEEE;
use IEEE.std_logic_1164.all;

package WBDevInterconIntPackage is
   function "and"(l : std_logic_vector;
                  r : std_logic) return std_logic_vector;
end package WBDevInterconIntPackage;

package body WBDevInterconIntPackage is
   function "and"(l : std_logic_vector;
                  r : std_logic) return std_logic_vector is
      variable result : std_logic_vector(l'range);
   begin  -- "and"
      for i in l'range loop
          result(i):=l(i) and r;
      end loop;  -- i
      return result;
   end function "and";
end package body WBDevInterconIntPackage;

library IEEE;
use IEEE.std_logic_1164.all;
use work.WBDevInterconIntPackage.all;

entity WBDevIntercon is
   port(
      -- wishbone master port(s)
      -- cpu
      cpu_dat_o : out std_logic_vector(7 downto 0);
      cpu_ack_o : out std_logic;
      cpu_dat_i : in  std_logic_vector(7 downto 0);
      cpu_we_i  : in  std_logic;
      cpu_adr_i : in  std_logic_vector(7 downto 0);
      cpu_cyc_i : in  std_logic;
      cpu_stb_i : in  std_logic;
      -- wishbone slave port(s)
      -- rs2
      rs2_dat_i : in  std_logic_vector(7 downto 0);
      rs2_ack_i : in  std_logic;
      rs2_dat_o : out std_logic_vector(7 downto 0);
      rs2_we_o  : out std_logic;
      rs2_adr_o : out std_logic_vector(0 downto 0);
      rs2_stb_o : out std_logic;
      -- ad
      ad_dat_i : in  std_logic_vector(7 downto 0);
      ad_ack_i : in  std_logic;
      ad_dat_o : out std_logic_vector(7 downto 0);
      ad_we_o  : out std_logic;
      ad_adr_o : out std_logic_vector(0 downto 0);
      ad_stb_o : out std_logic;
      -- tmr
      tmr_dat_i : in  std_logic_vector(7 downto 0);
      tmr_ack_i : in  std_logic;
      tmr_dat_o : out std_logic_vector(7 downto 0);
      tmr_we_o  : out std_logic;
      tmr_adr_o : out std_logic_vector(2 downto 0);
      tmr_stb_o : out std_logic;
      -- t16
      t16_dat_i : in  std_logic_vector(7 downto 0);
      t16_ack_i : in  std_logic;
      t16_dat_o : out std_logic_vector(7 downto 0);
      t16_we_o  : out std_logic;
      t16_adr_o : out std_logic_vector(0 downto 0);
      t16_stb_o : out std_logic;
      -- clock and reset
      wb_clk_i  : in std_logic;
      wb_rst_i  : in std_logic);
end entity WBDevIntercon;

architecture RTL of WBDevIntercon is
   signal rs2_ss : std_logic; -- slave select
   signal ad_ss : std_logic; -- slave select
   signal tmr_ss : std_logic; -- slave select
   signal t16_ss : std_logic; -- slave select
begin  -- RTL
   decoder:
   block
      signal adr : std_logic_vector(7 downto 0);
   begin
      adr <= cpu_adr_i;
      rs2_ss <= '1' when adr(7 downto 6)="00" else '0';
      ad_ss <= '1' when adr(7 downto 6)="01" else '0';
      tmr_ss <= '1' when adr(7 downto 6)="10" else '0';
      t16_ss <= '1' when adr(7 downto 6)="11" else '0';
      rs2_adr_o <= adr(0 downto 0);
      ad_adr_o <= adr(0 downto 0);
      tmr_adr_o <= adr(2 downto 0);
      t16_adr_o <= adr(0 downto 0);
   end block decoder;

   mux:
   block
      signal stb_m2s : std_logic;
      signal we_m2s  : std_logic;
      signal ack_s2m : std_logic;
      signal dat_m2s : std_logic_vector(7 downto 0);
      signal dat_s2m : std_logic_vector(7 downto 0);
   begin
      -- stb Master -> Slave [Selection]
      stb_m2s <= cpu_stb_i;
      rs2_stb_o <= rs2_ss and stb_m2s;
      ad_stb_o <= ad_ss and stb_m2s;
      tmr_stb_o <= tmr_ss and stb_m2s;
      t16_stb_o <= t16_ss and stb_m2s;
      -- we Master -> Slave
      we_m2s <= cpu_we_i;
      rs2_we_o <= we_m2s;
      ad_we_o <= we_m2s;
      tmr_we_o <= we_m2s;
      t16_we_o <= we_m2s;
      -- ack Slave -> Master
      ack_s2m <= rs2_ack_i or ad_ack_i or tmr_ack_i or t16_ack_i;
      cpu_ack_o <= ack_s2m;
      -- dat Master -> Slave
      dat_m2s <= cpu_dat_i;
      rs2_dat_o <= dat_m2s;
      ad_dat_o <= dat_m2s;
      tmr_dat_o <= dat_m2s;
      t16_dat_o <= dat_m2s;
      -- dat Slave -> Master [and/or]
      dat_s2m <= (rs2_dat_i and rs2_ss) or (ad_dat_i and ad_ss) or (tmr_dat_i and tmr_ss) or (t16_dat_i and t16_ss);
      cpu_dat_o <= dat_s2m;
   end block mux;
end architecture RTL;
#!/usr/bin/make
##############################################################################
#
# Makefile for the lattuino_1 project, Lattuino_1 toplevel.
# Target board: KÈfir I (4K) (FPGA: iCE40HX4K-TQ144).
# Automatically generated by xil_project v0.5.12 script from lattuino_1.xilprj.
# Based on makefiles by Salvador E. Tropea.
#
# DON'T EDIT!!!! change the project file instead
#
##############################################################################

PRJ=lattuino_1
GENDIR=gen
OBJDIR=Work
TARGET_DIR=gen
IMPLE=Target_Implmnt
TOP_LEVEL=Lattuino_1
CONSTRAINTS=lattuino_1.pcf
XIL_TOOLS_ICE_DIR?=/home/opt/iCEcube2.2017.01
SET_ICE_BASE=$(XIL_TOOLS_ICE_DIR)

XIL_FILTER=xil_filter.pl LATTICE
ifeq (, $(shell which $(XIL_FILTER)))
XIL_FILTER=cat
endif
FILTER_FIFO=$(TARGET_DIR)/comunica

##########
# Device #
##########
DEVICE_NAM=iCE40HX4K
DEVICE_DEV=$(SET_ICE_BASE)/sbt_backend/devices/ICE40P04.dev
DEVICE_LIB=$(SET_ICE_BASE)/sbt_backend/devices/ice40HX8K.lib
DEVICE_PKG=TQ144

###########################
# Configuration constants #
###########################
export LM_LICENSE_FILE=/home/salvador/0Data/FPGA/fpgatools/lattice/soft/iCEcube2/license.dat
export SBT_DIR=$(SET_ICE_BASE)/sbt_backend
SBT_TCL_LIB=$(SET_ICE_BASE)/sbt_backend/bin/linux/lib/tcl8.4
export FOUNDRY=$(SET_ICE_BASE)/LSE
export SYNPLIFY_PATH=$(SET_ICE_BASE)/synpbase

#########################################
# SBT and Synplify tool-chain constants #
#########################################
SYN_PRJ=lattuino_1.prj
SYN_LOG=$(IMPLE)/Target.srr
SBT_BACKEND_BIN=$(SET_ICE_BASE)/sbt_backend/bin/linux/opt
SBT_LIBS=$(SET_ICE_BASE)/sbt_backend/lib/linux/opt
SYNWRAP_D=$(SBT_BACKEND_BIN)/synpwrap
SYNWRAP=$(SYNWRAP_D)/synpwrap
SYN_EDIF=$(IMPLE)/Target.edf
SYN_CONS=$(IMPLE)/Target.scf
EDIFPARSER=$(SBT_BACKEND_BIN)/edifparser
SBTPLACER=$(SBT_BACKEND_BIN)/sbtplacer
SBT_OUT_D=$(IMPLE)/sbt
OUTPUTS_D=$(SBT_OUT_D)/outputs
NETLIST_D=$(SBT_OUT_D)/netlist
CONSTRAINT_D=$(SBT_OUT_D)/constraint
NETLIST_D2=$(NETLIST_D)/oadb-$(TOP_LEVEL)
PARSER_CONS=$(SBT_OUT_D)/Temp/sbt_temp.sdc
PLACER_D=$(OUTPUTS_D)/placer
PLACER_CONS=$(PLACER_D)/$(TOP_LEVEL)_pl.sdc
PLACER_PCF=$(PLACER_D)/$(TOP_LEVEL)_sbt.pcf
PACKER=$(SBT_BACKEND_BIN)/packer
PACKER_D=$(OUTPUTS_D)/packer
PACKER_CONS=$(PACKER_D)/$(TOP_LEVEL)_pk.sdc
PACKER_PIN=$(PACKER_D)/$(TOP_LEVEL)_pin_table.CSV
SDC_TRANS=$(SET_ICE_BASE)/sbt_backend/bin/sdc_translator.tcl
SBROUTER=$(SBT_BACKEND_BIN)/sbrouter
ROUTER_D=$(OUTPUTS_D)/router
ROUTER_OUT=$(ROUTER_D)/$(TOP_LEVEL).route
NETLISTER=$(SBT_BACKEND_BIN)/netlister
NETLISTER_D=$(OUTPUTS_D)/netlister
NETLISTER_CONS=$(NETLISTER_D)/$(TOP_LEVEL)_sbt.sdc
SIMULATION_D=$(OUTPUTS_D)/simulation_netlist
SDF_OUTPUT=$(SIMULATION_D)/$(TOP_LEVEL)_sbt.sdf
V_OUTPUT=$(SIMULATION_D)/$(TOP_LEVEL)_sbt.v
VHDL_OUTPUT=$(SIMULATION_D)/$(TOP_LEVEL)_sbt.vhd
SBTIMER=$(SBT_BACKEND_BIN)/sbtimer
TIMER_D=$(OUTPUTS_D)/timer
TIMER_RPT=$(TIMER_D)/$(TOP_LEVEL)_timing.rpt
BITMAP=$(SBT_BACKEND_BIN)/bitmap
BITMAP_D=$(OUTPUTS_D)/bitmap
BITMAP_BIN=$(BITMAP_D)/$(TOP_LEVEL)_bitmap.bin

ifdef LD_LIBRARY_PATH
  LD_LIBRARY_PATH_SW=${LD_LIBRARY_PATH}:$(SYNWRAP_D)
  LD_LIBRARY_PATH_SBT=${LD_LIBRARY_PATH}:$(SBT_LIBS)
else
  LD_LIBRARY_PATH_SW:=$(SYNWRAP_D)
  LD_LIBRARY_PATH_SBT:=$(SBT_LIBS)
endif

ifdef TCL_LIBRARY
  export TCL_LIBRARY=${TCL_LIBRARY}:$(SBT_TCL_LIB)
else
  export TCL_LIBRARY:=$(SBT_TCL_LIB)
endif

TARGET_DIRS=$(TARGET_DIR) $(TARGET_DIR)/$(IMPLE) $(TARGET_DIR)/$(SBT_OUT_D) \
	$(TARGET_DIR)/$(OUTPUTS_D) $(TARGET_DIR)/$(NETLIST_D) $(TARGET_DIR)/$(CONSTRAINT_D) \
	$(TARGET_DIR)/$(SIMULATION_D) $(TARGET_DIR)/$(PLACER_D) $(TARGET_DIR)/$(PACKER_D) \
	$(TARGET_DIR)/$(ROUTER_D) $(TARGET_DIR)/$(NETLISTER_D) $(TARGET_DIR)/$(TIMER_D) \
	$(TARGET_DIR)/$(BITMAP_D) $(FILTER_FIFO)

DEPE=\
	../../../AVR/AVR_iCE40/Work/avr_pkg.vhdl \
	../../../AVR/AVR_iCE40/core/io_reg_file.vhdl \
	../../../AVR/AVR_iCE40/core/reg_file.vhdl \
	../../../AVR/AVR_iCE40/core/decoder.vhdl \
	../../../AVR/AVR_iCE40/core/alu.vhdl \
	../../../AVR/AVR_iCE40/core/cpu.vhdl \
	../../../AVR/AVR_iCE40/core/core.vhdl \
	../../../AVR/AVR_iCE40/Work/dev_pkg.vhdl \
	../../../AVR/AVR_iCE40/devices/portx.vhdl \
	../../../AVR/AVR_iCE40/devices/wb_ctrl.v \
	../../../AVR/AVR_iCE40/devices/irq.vhdl \
	../../../AVR/AVR_iCE40/devices/spi.v \
	../../../AVR/AVR_iCE40/Work/mem_pkg.vhdl \
	../../../AVR/AVR_iCE40/memory/dm_s.vhdl \
	../../../AVR/AVR_iCE40/Work/micros_pkg.vhdl \
	../../../AVR/AVR_iCE40/micros/attX5.vhdl \
	../../../SPI/MCP300x/mcp300x.v \
	../../../SPI/Work/spi_pkg.vhdl \
	../../../SPI/spi_master.v \
	../../../CapSense/capsense_pkg.vhdl \
	../../../CapSense/capsense.v \
	../../../CapSense/capsense_sys.v \
	../../../miniuart/Work/miniuart_pkg.vhdl \
	../../../miniuart/Txunit.v \
	../../../miniuart/Rxunit.v \
	../../../miniuart/utils.v \
	../../../miniuart/miniuart.v \
	../../../lattice/sb_ice40_components_syn.vhdl \
	../../../lattuino/devices/ad_conv.v \
	../../../lattuino/devices/tm16b.v \
	../../../lattuino/devices/tmcounter.v \
	../../../lattuino/Work/pm_pkg.vhdl \
	../../../lattuino/Work/lattuino_1_bl_8.v \
	../../../lattuino/Work/lattuino_1_bl_4.v \
	../../../lattuino/Work/lattuino_1_bl_2.v \
	../../../lattuino/Work/lattuino_1_bl_2s.v \
	wb_dev_intercon_package.vhdl \
	wb_dev_intercon.v \
	cpuconfig.vhdl \
	lattuino_1.vhdl \
	 lattuino_1.pcf lattuino_1.prj Makefile

all: Makefile lattuino_1.pcf lattuino_1.prj $(TARGET_DIRS) $(TARGET_DIR)/lattuino_1.prj \
	$(TARGET_DIR)/$(BITMAP_BIN) $(PRJ).txt

$(TARGET_DIR)/lattuino_1.prj:
	cd $(TARGET_DIR) ; ln -s ../lattuino_1.prj lattuino_1.prj

###############################################
# Regenerate the files if the project changed #
###############################################
Makefile lattuino_1.pcf lattuino_1.prj: lattuino_1.xilprj lattuino_1.in.pcf \
	../../../AVR/AVR_iCE40/FPGA/attX5_v\
	../../../SPI/FPGA/mcp300x_v\
	../../../SPI/FPGA/spi_master_v\
	../../../CapSense/FPGA/capsense_v\
	../../../miniuart/FPGA/miniuart_v\
	../../../lattice/FPGA/primitives\
	../../../lattuino/FPGA/devices_v
	@echo ==** Starting xil_project.pl
	/usr/bin/xil_project.pl 
	@echo ==** Ending xil_project.pl

#######################
# Working directories #
#######################
$(TARGET_DIR):
	mkdir $(TARGET_DIR)

$(TARGET_DIR)/$(IMPLE):
	mkdir $(TARGET_DIR)/$(IMPLE)

$(TARGET_DIR)/$(SBT_OUT_D):
	mkdir $(TARGET_DIR)/$(SBT_OUT_D)

$(TARGET_DIR)/$(OUTPUTS_D):
	mkdir $(TARGET_DIR)/$(OUTPUTS_D)

$(TARGET_DIR)/$(NETLIST_D):
	mkdir $(TARGET_DIR)/$(NETLIST_D)

$(TARGET_DIR)/$(CONSTRAINT_D):
	mkdir $(TARGET_DIR)/$(CONSTRAINT_D)

$(TARGET_DIR)/$(SIMULATION_D):
	mkdir $(TARGET_DIR)/$(SIMULATION_D)

$(TARGET_DIR)/$(PLACER_D):
	mkdir $(TARGET_DIR)/$(PLACER_D)

$(TARGET_DIR)/$(PACKER_D):
	mkdir $(TARGET_DIR)/$(PACKER_D)

$(TARGET_DIR)/$(ROUTER_D):
	mkdir $(TARGET_DIR)/$(ROUTER_D)

$(TARGET_DIR)/$(NETLISTER_D):
	mkdir $(TARGET_DIR)/$(NETLISTER_D)

$(TARGET_DIR)/$(TIMER_D):
	mkdir $(TARGET_DIR)/$(TIMER_D)

$(TARGET_DIR)/$(BITMAP_D):
	mkdir $(TARGET_DIR)/$(BITMAP_D)

$(FILTER_FIFO):
	mkfifo $(FILTER_FIFO)

##############################
# Run Synplify Pro Synthesis #
##############################
$(TARGET_DIR)/$(SYN_EDIF) $(TARGET_DIR)/$(SYN_CONS): $(DEPE)
	@echo "==** Starting S√≠ntesis (Synplify Pro)"
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SW) ./command_wrapper.sh \
		$(SYNWRAP) -prj $(SYN_PRJ) -log $(SYN_LOG)
	@echo "==** Ending Synplify Pro"

# To open the Synplify Pro GUI
gui_sp:
	cd gen ; LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SW) $(SYNWRAP) -prj $(SYN_PRJ) -gui

##########################
# Import P&R Input Files #
##########################
$(TARGET_DIR)/$(PARSER_CONS): $(TARGET_DIR)/$(SYN_EDIF)
	@echo "==** Starting Conversi√≥n de formato (edifparser)"
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(EDIFPARSER) $(DEVICE_DEV) $(SYN_EDIF) \
		$(NETLIST_D) -p$(DEVICE_PKG) -y../$(CONSTRAINTS) -c --devicename $(DEVICE_NAM)
	@echo "==** Ending edifparser"
	touch $(TARGET_DIR)/$(PARSER_CONS)

##############
# Run Placer #
##############
$(TARGET_DIR)/$(PLACER_CONS) $(TARGET_DIR)/$(PLACER_PCF): $(TARGET_DIR)/$(PARSER_CONS)
	@echo "==** Starting Placer (sbtplacer)"
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(SBTPLACER) --des-lib $(NETLIST_D2) \
		--outdir $(PLACER_D) --device-file $(DEVICE_DEV) --package $(DEVICE_PKG) \
		--deviceMarketName $(DEVICE_NAM) --sdc-file $(PARSER_CONS) --lib-file $(DEVICE_LIB) \
		--effort_level std --out-sdc-file $(PLACER_CONS)

# Packer, but only to do a DRC
$(TARGET_DIR)/$(PACKER_PIN): $(TARGET_DIR)/$(PLACER_PCF)
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(PACKER) $(DEVICE_DEV) $(NETLIST_D2) \
		--package $(DEVICE_PKG) --outdir $(PACKER_D) --DRC_only --translator $(SDC_TRANS) \
		--src_sdc_file $(PLACER_CONS) --dst_sdc_file $(PACKER_CONS) --devicename $(DEVICE_NAM)
	@echo "==** Ending sbtplacer"

##############
# Run Router #
##############
# Packer, full
$(TARGET_DIR)/$(PACKER_CONS): $(TARGET_DIR)/$(PACKER_PIN)
	@echo "==** Starting Router (sbrouter)"
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(PACKER) $(DEVICE_DEV) $(NETLIST_D2) \
		--package $(DEVICE_PKG) --outdir $(PACKER_D) --translator $(SDC_TRANS) \
		--src_sdc_file $(PLACER_CONS) --dst_sdc_file $(PACKER_CONS) --devicename $(DEVICE_NAM)

# Router
$(TARGET_DIR)/$(ROUTER_OUT): $(TARGET_DIR)/$(PACKER_CONS)
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(SBROUTER) $(DEVICE_DEV) $(NETLIST_D2) $(DEVICE_LIB) \
		$(PACKER_CONS) --outdir $(ROUTER_D) --sdf_file $(SDF_OUTPUT) --pin_permutation

# Post P&R simulation models
$(TARGET_DIR)/$(NETLISTER_CONS): $(TARGET_DIR)/$(ROUTER_OUT)
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(NETLISTER) --verilog $(V_OUTPUT) \
		--vhdl $(VHDL_OUTPUT) --lib $(NETLIST_D2) --view rt --device $(DEVICE_DEV) \
		--splitio --in-sdc-file $(PACKER_CONS) --out-sdc-file $(NETLISTER_CONS)

# Post P&R timing report
$(TARGET_DIR)/$(SDF_OUTPUT) $(TARGET_DIR)/$(TIMER_RPT): $(TARGET_DIR)/$(NETLISTER_CONS)
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(SBTIMER) --des-lib $(NETLIST_D2) \
		--lib-file $(DEVICE_LIB) --sdc-file $(NETLISTER_CONS) --sdf-file $(SDF_OUTPUT) \
		--report-file $(TIMER_RPT) --device-file $(DEVICE_DEV) --timing-summary
	@echo "==** Ending sbrouter"

###################
# Generate Bitmap #
###################
$(TARGET_DIR)/$(BITMAP_BIN): $(TARGET_DIR)/$(SDF_OUTPUT)
	@echo "==** Starting Generaci√≥n del bitstream (bitmap)"
	LD_LIBRARY_PATH=$(LD_LIBRARY_PATH_SBT) ./command_wrapper.sh \
		$(BITMAP) $(DEVICE_DEV) --design $(NETLIST_D2) \
		--device_name $(DEVICE_NAM) --package $(DEVICE_PKG) --outdir $(BITMAP_D) --low_power on \
		--init_ram on --init_ram_bank 1111 --frequency low --warm_boot on
	@echo "==** Ending bitmap"

XIL_RESUMEN=xil_resumen.pl $(PRJ) $(GENDIR)
ifeq (, $(shell which $(XIL_RESUMEN)))
XIL_RESUMEN=touch $(PRJ).txt
endif
###################
# Project Summary #
###################
$(PRJ).txt: $(TARGET_DIR)/$(PLACER_PCF) $(TARGET_DIR)/$(TIMER_RPT)
	@echo "==** Starting Resumen del proyecto (xil_resumen.pl)"
	$(XIL_RESUMEN)
	@echo "==** Ending xil_resumen.pl"

######################
# Board transference #
######################
transfer-rom: $(TARGET_DIR)/$(BITMAP_BIN) do-transfer-rom

do-transfer-rom: $(TARGET_DIR)/$(BITMAP_BIN)
	make_impact.pl --file=$< --mode=prom --submode=spi --board=kefir_i

##########
# Others #
##########
clean: 
	rm -rf gen lattuino_1.pcf lattuino_1.prj Makefile  .*~ command_wrapper.sh

# Generar el INTERCON de WISHBONE para los perifÈricos.
wb_dev_intercon.vhdl wb_dev_intercon_package.vhdl wb_dev_intercon.inc wb_dev_intercon.h: \
	wb_devices.defines
	wishbone.pl --nogui --gen-header --hdl=vhdl --ext=.vhdl $<

wb_dev_intercon.v: wb_devices.defines
	wishbone.pl --nogui --hdl=verilog --ext=.v $<

wb_clean:
	rm -rf wb_dev_intercon*

# Asegurarse que la ROM estÈ actualizada.
.PHONY : updaterom

../../../lattuino/Work/lattuino_1_bl_8.vhdl ../../../lattuino/Work/pm_pkg.vhdl: updaterom

updaterom:
	$(MAKE) -C ../../bootloader/ needed
